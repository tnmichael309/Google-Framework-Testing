        -:    0:Source:../samples/hw1.cc
        -:    0:Graph:hw1.gcno
        -:    0:Data:hw1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "hw1.h"
        -:    2:
        -:    3:// Return expected sells
        -:    4:// 1 <= nLock <= 70 or nLock = -1
        -:    5:// 1 <= nBarrel <= 80
        -:    6:// 1 <= nStock <= 90
        -:    7:// lock: $45, barrel: $25, stock: $30
        -:    8:// commission rate: 10%
       40:    9:const char* Commission(int nLock, int nBarrel, int nStock){
       40:    9-block  0
        -:   10:
       40:   11:	if(nLock < -1 || nLock == 0 || nLock > 70) return "Invalid input";
       40:   11-block  0
       31:   11-block  1
       22:   11-block  2
       27:   11-block  3
       13:   12:	if(nBarrel == 0 || nBarrel > 80) return "Invalid input";
       13:   12-block  0
       10:   12-block  1
        6:   12-block  2
        7:   13:	if(nStock == 0 || nStock > 90) return "Invalid input";
        7:   13-block  0
        6:   13-block  1
        2:   13-block  2
        -:   14:	
        5:   15:	if(nLock == -1) return "Program terminates";
        5:   15-block  0
        1:   15-block  1
        -:   16:	
        4:   17:	int sell = nLock*45 + nBarrel*25 + nStock*30;
        4:   18:	sell/=10;
        -:   19:	
        -:   20:	static char buffer[50];
        4:   21:	int n = 0;
        4:   22:	n = sprintf(buffer, "%d", sell);
        -:   23:	
        4:   24:	buffer[n] = '\0';
        -:   25:	
        4:   26:	return buffer;
        4:   26-block  0
        -:   27:}
        -:   28:
        -:   29:
        -:   30:// Returns next date
       51:   31:const char* NextDate(int year, int month, int day){
       51:   31-block  0
        -:   32:	
       51:   33:	int errorCount = 0;
        -:   34:	
       51:   35:	if(year < 0) errorCount++;
       51:   35-block  0
       11:   35-block  1
       51:   36:	if(month < 1 || month > 12) errorCount++;
       51:   36-block  0
       45:   36-block  1
       12:   36-block  2
       51:   37:	if(day < 1 || day > 31) errorCount++;
       51:   37-block  0
       43:   37-block  1
       14:   37-block  2
        -:   38:	
       51:   39:	if(errorCount > 0) return "Invalid input";
       51:   39-block  0
       20:   39-block  1
        -:   40:	
        -:   41:	
        -:   42:	//check whether it is a special year
       31:   43:	bool isSpecialYear = ((year%4 == 0) && (year%100 != 0)) || (year%400 == 0);
       31:   43-block  0
        8:   43-block  1
       27:   43-block  2
        6:   43-block  3
       25:   43-block  4
        -:   44:	static char buffer[50];
       31:   45:	int n = 0;
        -:   46:	
       31:   47:	if(isSpecialYear && month == 2){
       31:   47-block  0
        6:   47-block  1
       10:   48:		if(day > 29) return "Invalid input";
        6:   48-block  0
        2:   48-block  1
        4:   48-block  2
        -:   49:		else{
        4:   50:			if(day == 29) n = sprintf(buffer, "%d/%d/%d", year, month+1, 1);
        4:   50-block  0
        1:   50-block  1
        3:   51:			else n = sprintf(buffer, "%d/%d/%d", year, month, day+1);
        3:   51-block  0
        -:   52:		}
       25:   53:	}else if(month == 2){
       25:   53-block  0
        7:   54:		if(day > 28) return "Invalid input";
        7:   54-block  0
        4:   54-block  1
        -:   55:		else{
        3:   56:			if(day == 28) n = sprintf(buffer, "%d/%d/%d", year, month+1, 1);
        3:   56-block  0
        2:   56-block  1
        3:   57:			else n = sprintf(buffer, "%d/%d/%d", year, month, day+1);
        1:   57-block  0
        3:   57-block  1
        -:   58:		}
        -:   59:	}else{
        -:   60:		
       18:   61:		if((month <= 7 && month % 2 == 1) || (month >= 8 && month % 2 == 0) ){
       18:   61-block  0
       12:   61-block  1
       12:   61-block  2
        6:   61-block  3
       24:   62:			if(day > 31) return "Invalid input";
       12:   62-block  0
    $$$$$:   62-block  1
       12:   62-block  2
        -:   63:			else{
       12:   64:				if(month == 12 && day == 31) n = sprintf(buffer, "%d/%d/%d", year+1, 1, 1);
       12:   64-block  0
        4:   64-block  1
        2:   64-block  2
       10:   65:				else if(day == 31) n = sprintf(buffer, "%d/%d/%d", year, month+1, 1);
       10:   65-block  0
        4:   65-block  1
        6:   66:				else n = sprintf(buffer, "%d/%d/%d", year, month, day+1);
        6:   66-block  0
        -:   67:			}
        -:   68:		}else{
        6:   69:			if(day > 30) return "Invalid input";
        6:   69-block  0
        2:   69-block  1
        -:   70:			else{
        4:   71:				if(day == 30) n = sprintf(buffer, "%d/%d/%d", year, month+1, 1);
        4:   71-block  0
        2:   71-block  1
        2:   72:				else n = sprintf(buffer, "%d/%d/%d", year, month, day+1);
        2:   72-block  0
        -:   73:			}
        -:   74:		}
        -:   75:	}
        -:   76:	
       23:   77:	buffer[n] = '\0';
        -:   78:	
       23:   79:	return buffer;
       23:   79-block  0
        -:   80:	
        -:   81:};
        -:   82:
        -:   83:// Returns type of the triangle
       29:   84:const char* Triangle(int a, int b, int c){
       29:   84-block  0
        -:   85:
       29:   86:	if(a <= 0 || b <= 0 || c <= 0){
       29:   86-block  0
       25:   86-block  1
       23:   86-block  2
        7:   87:		return "Invalid length input";
        7:   87-block  0
        -:   88:	}
        -:   89:	
       22:   90:	if(a == b && b == c){
       22:   90-block  0
        4:   90-block  1
        2:   91:		return "Equilateral";
        2:   91-block  0
        -:   92:	}
        -:   93:	
       20:   94:	if(a == b || b == c || a == c){
       20:   94-block  0
       18:   94-block  1
       16:   94-block  2
        6:   95:		return "Isosceles";
        6:   95-block  0
        -:   96:	}
        -:   97:	
       14:   98:	if(a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b){
       14:   98-block  0
       12:   98-block  1
       10:   98-block  2
        6:   99:		return "Scalene";
        6:   99-block  0
        -:  100:	}
        -:  101:	
        8:  102:	if( (a+b > c && a+c > b && b+c > a) == false ){
        8:  102-block  0
        6:  102-block  1
        4:  102-block  2
        6:  103:		return "Not a triangle";
        6:  103-block  0
        -:  104:	}
        -:  105:	
        2:  106:	return "Non-special triangle";
        2:  106-block  0
        -:  107:};
